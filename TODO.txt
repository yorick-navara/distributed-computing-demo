v serialize/deserialize message
v Setup mysql in container: https://hevodata.com/learn/docker-mysql/
v Add process table to mysql: https://eloquentcode.com/create-a-mysql-docker-container-with-a-predefined-database
v Create common DAL
    - https://dev.mysql.com/doc/connector-python/en/connector-python-example-connecting.html
. Read and write to SQL process table
    v master: insert tasks with status NOT_STARTED
    . worker: update tasks with status STARTED/FINISHED/ERROR
- Insert worker id in table:
    - To get hostname from worker:
        - hostname = subprocess.check_output(['bash','-c', `echo $NAME`]) 
- Insert create, start and end datetime of task
- Insert description of task (selections)
- Error handling: what happens with failed messages?


- Message acknowledgements:
  - https://www.rabbitmq.com/confirms.html
- Make presentation:
  - https://marp.app/


# Examples of connecting with DB: 

# Insert data

from datetime import date, datetime, timedelta
import mysql.connector

cnx = mysql.connector.connect(user='scott', database='employees')
cursor = cnx.cursor()

tomorrow = datetime.now().date() + timedelta(days=1)

add_employee = ("INSERT INTO employees "
               "(first_name, last_name, hire_date, gender, birth_date) "
               "VALUES (%s, %s, %s, %s, %s)")
add_salary = ("INSERT INTO salaries "
              "(emp_no, salary, from_date, to_date) "
              "VALUES (%(emp_no)s, %(salary)s, %(from_date)s, %(to_date)s)")

data_employee = ('Geert', 'Vanderkelen', tomorrow, 'M', date(1977, 6, 14))

# Insert new employee
cursor.execute(add_employee, data_employee)
emp_no = cursor.lastrowid

# Insert salary information
data_salary = {
  'emp_no': emp_no,
  'salary': 50000,
  'from_date': tomorrow,
  'to_date': date(9999, 1, 1),
}
cursor.execute(add_salary, data_salary)

# Make sure data is committed to the database
cnx.commit()

cursor.close()
cnx.close()

# Query data
import datetime
import mysql.connector

cnx = mysql.connector.connect(user='scott', database='employees')
cursor = cnx.cursor()

query = ("SELECT first_name, last_name, hire_date FROM employees "
         "WHERE hire_date BETWEEN %s AND %s")

hire_start = datetime.date(1999, 1, 1)
hire_end = datetime.date(1999, 12, 31)

cursor.execute(query, (hire_start, hire_end))

for (first_name, last_name, hire_date) in cursor:
  print("{}, {} was hired on {:%d %b %Y}".format(
    last_name, first_name, hire_date))

cursor.close()
cnx.close()